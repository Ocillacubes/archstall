#!/bin/bash

#
# Archstall Arch Linux installer made by PowerMan2206.
#

# set style variables
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
bold=$(tput bold)
end=$(tput sgr0)

clear

echo -e "${bold}${green}Archstall Arch Linux installer $end$end"
echo -e "${red}This script comes with no warranty, screwing up your system is your fault
You can cancel the script at any time by holding down Ctrl+C $end"
echo ""
read -p "Press any key to continue... "
echo ""

# check the boot mode
if [[ -d /sys/firmware/efi/efivars ]]; then
	boot="uefi"
	echo -e "System booted in ${bold}UEFI$end mode"
else
	boot="bios"
	echo -e "System booted in ${bold}BIOS$end mode"
fi

echo ""

# set the system clock and wait a bit for the messages
echo "Ensuring the system clock is accurate..."
timedatectl set-ntp true; sleep 2

echo ""

# get the disk to partition
lsblk
echo ""
read -p "Select the disk you want to use ${red}(not a partition) $end" disk
echo ""

# automatic or manual disk partitioning?
read -p "Want (a)utomatic or (m)anual disk partitioning? [automatic] " partitioning 
echo ""
	
# automatic partitioning
if [[ $partitioning == "automatic" || $partitioning == "a" || $partitioning == "" ]]; then
	echo "$bold${red}WARNING: THIS WILL ERASE EVERYTHING ON THE SELECTED DISK $end $end"
	read -p "Are you sure you want to continue? You can cancel with Ctrl+C "
	echo ""
	
	if [[ $boot == "uefi" ]]; then
		parted /dev/$disk mklabel gpt

		echo "Making the ${bold}EFI$end partition..."
		parted /dev/$disk mkpart P1 1MiB 512MiB
		mkfs.fat -F32 /dev/${disk}1
		parted /dev/$disk set 1 esp on
		efipartition=${disk}1
		
		echo "Making the ${bold}root$end partition..."
		parted /dev/$disk mkpart P2 512MiB 100%
		mkfs.ext4 /dev/${disk}2
		rootpartition=${disk}2

	elif [[ $boot == "bios" ]]; then

		parted /dev/$disk mklabel msdos
		echo "Making the ${bold}root$end partition..."
		parted /dev/$disk mkpart primary 1MiB 100%
		mkfs.ext4 /dev/${disk}1
		parted /dev/$disk set 1 boot on
		rootpartition=${disk}1

	fi

# manual partitioning
elif [[ $partitioning == "manual" || $partitioning == "m" ]]; then
	read -p "Do you want to use (f)disk, (c)fdisk, or (p)arted? [fdisk] " partitioner

	if [[ $partitioner == "f" || $partitioner == "" ]]; then
		fdisk /dev/$disk
	elif [[ $partitioner == "c" ]]; then
		cfdisk /dev/$disk
	elif [[ $partitioner == "p" ]]; then
		parted /dev/$disk
	fi

	echo ""

	if [[ $boot == "uefi" ]]; then
		lsblk
		echo ""
		read -p "What's the ${bold}EFI$end partition? [${disk}1] " efipartition
		if [[ $efipartition == "" ]]; then
			efipartition=${disk}1
		fi
		
		echo ""
		read -p "What's the ${bold}root$end partition? [${disk}2] " rootpartition
		if [[ $rootpartition == "" ]]; then
			rootpartition=${disk}2
		fi

		echo ""
		echo "Formatting partitions..."
		mkfs.fat -F32 /dev/$efipartition
		mkfs.ext4 /dev/$rootpartition

	elif [[ $boot == "bios" ]]; then
		lsblk
		echo ""
		read -p "What's the ${bold}root$end partition? [${disk}1] " rootpartition
		if [[ $rootpartition == "" ]]; then
			rootpartition=${disk}1
		fi

		echo ""
		echo "Formatting partition..."
		mkfs.ext4 /dev/$rootpartition
	fi
fi

echo ""

# mount the partition/s
if [[ $boot == "uefi" ]]; then
	mount /dev/$rootpartition /mnt
	mkdir /mnt/efi
	mount /dev/$efipartition /mnt/efi

elif [[ $boot == "bios" ]]; then
	mount /dev/$rootpartition /mnt

fi

clear

# Check if package list is there (would be a result of git clone)
if [ ! -f "packages" ]; then
    # download the package list
    echo "${green}Downloading the package list...$end"
    echo ""
    curl https://raw.githubusercontent.com/ocillacubes/archstall/master/packages > packages
    echo ""
fi

# Choose packages
# Browsers
read "Please select what browser(s) you would like (lynx installed by default)"
browserlist=('qutebrowser' 'firefox' 'finished')
select selection in "${browserlist[@]}"; do
    case $selection in 
        "firefox")
            echo $selection >> packages
            ;;
        "qutebrowser")
            echo $selection >> packages
            ;;
        "finished")
            break
            ;;
        *) echo "Please select a valid option" ;;
    esac
done

# File managers
read "Select file managers"
filemgrlist=('nautilus' 'ranger' 'nnn' 'finished')
select selection in "${filemgrlist[@]}"; do
    case $selection in 
        "natuilus")
            echo $selection >> packages
            ;;
        "ranger")
            echo $selection >> packages
            ;;
        "nnn")
            echo $selection >> packages
            ;;
        "finished")
            break
            ;;
        *) echo "Please select a valid option" ;;
    esac
done

# Terminal Emulators
read "Select terminal emulators (uwuTerm is default, and konsole will come if you select plasma as a DE)"
termemlist=('xterm' 'alacritty' 'finished')
select selection in "${termemlist[@]}"; do
    case $selection in 
        "xterm")
            echo $selection >> packages
            ;;
        "alacritty")
            echo $selection >> packages
            ;;
        "finished")
            break
            ;;
        *) echo "Please select a valid option" ;;
    esac
done

# DE/WM
read "Select a window manager or desktop enviornment (can only choose one)"
uglylist=('gnome' 'plasma' 'lxqt' 'mate' 'xfce4' 'xfce4-goodies' 'i3-gaps' 'bspwm' 'openbox' 'xmonad' 'awesome' 'herbstluftwm' 'Im too much of a gamer for this garbage Ill stick to tty')
# Worlds ugliest case thing
select selection in "${uglylist[@]}"; do
    case $selection in 
        "gnome")
            echo $selection >> packages
            break
            ;;
        "plasma")
            echo $selection >> packages
            break
            ;;
        "lxqt")
            echo $selection >> packages
            break
            ;;
        "mate")
            echo $selection >> packages
            break
            ;;
        "xfce4")
            echo $selection >> packages
            break
            ;;
        "xfce4-goodies")
            echo $selection >> packages
            break
            ;;
        "i3-gaps")
            echo $selection >> packages
            break
            ;;
        "bspwm")
            echo $selection >> packages
            break
            ;;
        "openbox")
            echo $selection >> packages
            break
            ;;
        "xmonad")
            echo $selection >> packages
            break
            ;;
        "awesome")
            echo $selection >> packages
            break
            ;;
        "herbstluftwm")
            echo $selection >> packages
            break
            ;;
        "Im too much of a gamer for this garbage Ill stick to tty")
            break
            ;;
        *) echo "Please select a valid option" ;;
    esac
done

# Social-y Stuff
read "Select social type things"
socialylist=('newsboat' 'mumble' 'mutt' 'finished')
select selection in "${socialylist[@]}"; do
    case $selection in 
        "newsboat")
            echo $selection >> packages
            ;;
        "mumble")
            echo $selection >> packages
            ;;
        "mutt")
            echo $selection >> packages
            ;;
        "finished")
            break
            ;;
        *) echo "Please select a valid option" ;;
    esac
done

# TODO: add support for paru so bread will be happy for once


# Others
read "Select other programs"
otherslist=('ncmpcpp' 'neofetch' 'gimp' 'flameshot' 'pulseaudio' 'finished')
select selection in "${otherslist[@]}"; do
    case $selection in 
        "neofetch")
            echo $selection >> packages
            ;;
        "gimp")
            echo $selection >> packages
            ;;
        "flameshot")
            echo $selection >> packages
            ;;
        "pulseaudio")
            echo $selection >> packages
            ;;
        "ncmpcpp")
            echo $selection >> packages
            echo "Read here to find how to configure ncmpcpp: https://wiki.archlinux.org/index.php/Ncmpcpp"
            ;;
        "finished")
            break
            ;;
        *) echo "Please select a valid option" ;;
    esac
done




# take the packages list and get rid of the comments
echo "Cleaning up the package list..."
cat packages | grep -v "#" > packagesclean

echo ""


# put the DE service in a variable and install extra packages if needed
if grep -Fxq "gnome" packagesclean; then
	dm="gdm"
	de="y"
elif grep -Fxq "plasma" packagesclean; then
	dm="sddm"
	de="y"
	echo "konsole" >> packagesclean
elif grep -Fxq "lxqt" packagesclean || grep -Fxq "mate" packagesclean || grep -Fxq "xfce4" packagesclean; then
	dm="lightdm"
	de="y"
	echo "lightdm" >> packagesclean
	echo "lightdm-gtk-greeter" >> packagesclean
	echo "xorg-server" >> packagesclean
fi

# read the package list and install those packages
echo "Installing the packages with pacstrap..."
# actual installing
pacstrap /mnt - < packagesclean

echo ""

# make the fstab
echo "Generating the fstab..."
genfstab -U /mnt >> /mnt/etc/fstab

echo ""


# Check if 2nd script is there
if [ ! -f "archstall2" ]; then
# downloading the second script from GitHub and preparing stuff
    echo "${greed}Downloading the second script...$end"
    echo ""
    curl https://raw.githubusercontent.com/ocillacubes/archstall/master/archstall2 > /mnt/archstall2
    chmod +x /mnt/archstall2
    echo $boot > /mnt/bootmode
    echo $disk > /mnt/diskthing
    echo $dm > /mnt/dm
    echo $de > /mnt/de
    echo ""
fi

clear

# chroot in and run the second script
arch-chroot /mnt /bin/bash
cd /
bash archstall2

# Install yay
git clone https://aur.archlinux.org/yay.git
cd yay
makepkg -si
cd ../
rm -rf yay
# TODO install aur packages

# Install uwuTerm
wget https://github.com/breadtard/uwuTerm/raw/main/uwuTerm
mv uwuTerm /usr/bin/

# Leave chroot
exit
echo "test"

clear

# cleanup
echo "Cleaning up files..."
rm /mnt/archstall2 /mnt/bootmode /mnt/diskthing /mnt/dm /mnt/de

echo ""


# unmount the filesystems
echo "Unmounting the filesystems..."
umount -R /mnt 

clear

# reboot
echo "${green}Installation finished!$end"
read -p "Press any key to reboot... "
reboot
