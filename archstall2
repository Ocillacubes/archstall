#!/bin/bash

#
# Archstall2 Arch Linux installer made by PowerMan2206.
# Meant to be run through the other script, don't run on it's own
#

# set the variables
boot=`cat /bootmode`
disk=`cat /diskthing`

# select timezone region
echo "Select your region..."
echo ""
ls /usr/share/zoneinfo
echo ""
read region
echo ""

# same but for city
echo "Select your city..."
echo ""
ls /usr/share/zoneinfo/$region
echo ""
read city
echo ""

# actually set the timezone
echo "Setting the timezone..."
ln -sf /usr/share/zoneinfo/$region/$city /etc/localtime
echo ""

# somethingsomething time
echo "Generating /etc/adjtime..."
hwclock --systohc
echo ""

# locale stuff (???)
echo "Setting the locale..."
sed -i 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf
echo ""

echo "Type in the hostname:"
read hostname
echo $hostname > /etc/hostname
echo ""

echo "Setting the root password..."
passwd
echo ""

echo "Do you want to add a user? (y/n)"
read user
echo ""

if [[ $user == "y" ]]; then
	echo "What do you want to name your user?"
	read username
	groupadd sudo
	useradd -m "$username" -G sudo
	sed -i 's/# %sudo/%sudo/' /etc/sudoers
	echo ""

	echo "Setting the user password..."
	passwd $username
fi

clear

# network setup
echo "Want to use systemd-networkd? (y/n)"
read network
echo ""

if [[ $network == "y" ]]; then
	echo "Type in your interface..."
	# takes the long `ip a` output and shortens it down to just the interfaces
	ip a | grep "<" | cut -d':' -f2 | cut -c 2-
	echo ""
	read interface

	systemctl enable systemd-networkd systemd-resolved
	echo "[Match]" >> /etc/systemd/network/20-wired.network
	echo "Name=enp1s0" >> /etc/systemd/network/20-wired.network
	echo "[Network]" >> /etc/systemd/network/20-wired.network
	echo "DHCP=yes" >> /etc/systemd/network/20-wired.network
fi

echo ""

# read CPU vendor (for microcode)
echo "Do you have an Intel or AMD CPU? (lowercase pls)"
read cpu
# bootloader
echo "Installing GRUB..."
echo ""

# different installation methods based on the boot mode
if [[ $boot == "uefi" ]]; then
	pacman -S grub efibootmgr $cpu-ucode --noconfirm
	echo ""
	grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB
	echo ""
	grub-mkconfig -o /boot/grub/grub.cfg
		
elif [[ $boot == "bios" ]]; then
	pacman -S grub $cpu-ucode --noconfirm
	echo ""
	grub-install /dev/$disk
	echo ""
	grub-mkconfig -o /boot/grub/grub.cfg
	
fi

exit
